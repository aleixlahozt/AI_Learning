# generated by datamodel-codegen:
#   filename:  carpurchase.json
#   timestamp: 2024-10-24T11:34:44+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Extra, Field


class CarPurchase(BaseModel):
    class Config:
        extra = Extra.forbid

    full_name: str = Field(
        ...,
        description="The user's full name, which is required for personalizing the information. This must be validated by spelling it back to the user and asking for confirmation before using it in the function call.",
    )
    brand: str = Field(
        ...,
        description='The brand of the car the user is interested in. This is a required parameter.',
    )
    max_budget: Optional[float] = Field(
        ...,
        description="The maximum budget the user has for purchasing the car. This information is optional and must be asked to the user once, but proceed if the user doesn't want to provide it. Set it as 100000 if no info from the conversation can be inferred.",
    )
    current_time_of_year: Optional[str] = Field(
        ...,
        description="The time of the year when the user is inquiring about the car purchase, such as 'Spring', 'Summer', 'Fall', or 'Winter'. This should be inferred from the conversation context and not directly asked to the user. If no info from the conversation can be inferred, set it as 'Summer'.",
    )
